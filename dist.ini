name    = Dist-Zilla-MintingProfile-Author-JEFFERYS
author  = Stuart R. Jefferys <srjefferys@gmail.com>
license = GPL_3
copyright_holder = Stuart R. Jefferys
copyright_year   = 2013


; 0. PLUGINS OVERVIEW
;=======================================================================

;  1. PREP: Provide/collect information for running dzil.
;  2. GATHER-COPY: Copy project files into distro.
;  3. GATHER-CREATE: Create new stand-alone files in distro.
;   3.1. GATHER-CREATE: DISTRO-FILE: Add distro meta and info files.
;   3.2. GATHER-CREATE: TEST-CODE:   Add tests for *.pl and *.pm code
;   3.3. GATHER-CREATE: TEST-POD:    Add tests for *.pl and *.pm POD
;   3.4. GATHER-CREATE: TEST-SUITE:  Add perl test suites.
;   3.5. GATHER-CREATE: TEST-DISTRO: Add tests for distro files
;   3.6. GATHER-CREATE: TEST-FILE:   Add tests that examine all files.
;  4. GATHER-GENERATE: Create distro files dependent on others
;  5. PRUNE: Remove any files that should not be in distro.
;  6. MUNGE: Update any files in distro that need changing.
;  7. PACKAGE: Create the distro.
;  8. POST-PACKAGE: Plugins requiring a completed distro.
;  9. PRE-RELEASE: Preparing for a release.
; 10. RELEASE: Releasing the software.
; 11. POST-RELEASE: Updating project after a succeful release.
; 12. MIXED: Plugins doing more than one thing.


;  1. PREP: Provide/collect information for running dzil.
;=======================================================================
;      Provides information for use by dzil. 

;     PREP: This plugin specifies a directory whose contents are to be
; installed as executables when the module is installed.
[ExecDir]
; dir = bin ; Default

;     PREP: This plugin specifies a directory whose contents are to be
; installes as read-only data when the module is installed. This is
; used by the File::ShareDir module. 
[ShareDir]
; dir = share ; Default


;  2. GATHER-COPY: Copy project files into distro.
;=======================================================================

;      GATHER-COPY: Collects a list of all files and directories in the
; project for potential inclusion in the distribution. NOTE: Many files
; will be generated directly into the distro and hence aren't sitting
; around cluttering up the project.
;      Probably don't want to "include_dotfiles" as that will pick up
; included git repositories, etc. Also generally don't want to
; "follow_symlinks" which will follow and copy symlinked directories.
; Symlinked files are always copied and included.
;      Can specify multiple "exclude_filename" and "exclude_match" to
; prevent coppying of project files and/or directories (by name or by
; reg-exp), but shouldn't list things dropped by [PruneCruft].
[GatherDir]
; include_dotfiles = 0       ; Default
; follow_symlinks  = 0       ; Default  
; exclude_filename = STRING  ; No default
; exclude_match    = REG-EXP ; No default


;  3. GATHER-CREATE: Create stand-alone distro files.
;=======================================================================

;  3.1 GATHER-CREATE: DISTRO-FILE: Create distro meta and info files.
;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

;      DISTRO-FILE: The META.yml file used when uploading to CPAN.
[MetaYAML]
; filename = META.yml ; Default
; version  = 1.4      ; Default

;      DISTRO-FILE:: The META.json file used when uploading to CPAN.
[MetaJSON]
; filename = META.json ; Default
; version  = 2         ; Default


;      DISTRO-FILE: The full-text of the license as specified in
; the dzil config file. No settings here.
[License]

;      DISTRO-FILE: A readme file with minimal content (giving
; package name, version, the (main) modules # ABSTRACT line, and the
; license info. No settings here.
[Readme]

;  3.2 GATHER-CREATE: TEST-CODE: Add tests for *.pl and *.pm code
;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

;      TEST-CODE: Everything compiles, right?
[Test::Compile]

;      TEST-CODE: Ensure all code is compatible with the specified perl
; version (or at least doesn't appear to need features from a
; later version.
[Test::MinimumVersion]
max_target_perl = 5.10.1

;      TEST-CODE: Attempts to load all required modules as listed in
; the META.json file. May also dump %INC.
[Test::PrereqsFromMeta]

;      TEST-CODE: Another test to ensure that dependencies are installed.
; Not well documented, so including it and the prior.
[Test::CheckDeps]

;      TEST-CODE: Does a load test for all modules in the MANIFEST.
[Test::UseAllModules]

;      TEST-CODE: Ensure all variables are used for something. [SRJ: May
; duplicate a Perl::Critic test, but might be different.]
[Test::UnusedVars]

;      TEST-CODE: Every module must have a version (if has_version = 1),
; and that version must be in either v1.234.5 or 2.3456 format (if
; is_strict = 1).
[Test::Version]
is_strict   = 1 ; Default
; has_version = 1 ; Default

;      TEST-CODE: Vheck that all modules are using the same version.
[ConsistentVersionTest]

;     TEST-CODE: Smart::Comments are great for testing, but don't
; want to leave them enables when releasing...
[NoSmartCommentsTests]


;  3.3 GATHER-CREATE: TEST-POD: Add tests for *.pl and *.pm POD
;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

;      TEST-POD: Pod coverage testing. A Kwalitee test.
[PodCoverageTests]

;      TEST-POD: Pod Spelling check. Annoying but really useful.
[Test::PodSpelling]

;      TEST-POD: Ensure pod is formated correctly. A Kwalitee test.
[PodSyntaxTests]

;      TEST-POD: Validate links (not http links) in POD. For links
; to modules, verifies that the modules are available using
; the localaly installed cpan.
[Test::Pod::LinkCheck]

;     TEST-POD: Validate http links in POD, actually look them up
; to ensure they don't return an error.
[Test::Pod::No404s]

;     TEST-POD: Checks the contents of a SYNOPSIS block to make
; sure it is legal perl code. Can specify code elsewhere in
; the POD under "=for test_synopsis" to allow this to pass.
; E.g. Using undefined variables in synopsis fails unles
;     =for test_synopsis
;     my($scalar, @array, %hash);
; is specified somewhere in POD (probably before synopsis...)
[Test::Synopsis]


;  3.4. GATHER-CREATE: TEST-SUITE: Add perl test suites.
;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

;      TEST-SUITE: Apply perl best practices tests using Perl::Critic.
; The default config file, if any, is called perlcritic.rc
; and can be used to configure default rules.
[Test::Perl::Critic]
; critic_config = perlcritic.rc   ; Default

;      TEST-SUITE: Applies metrics used by CPAN to measure "kwalitee"
; of a distribution, ensuring this distribution has high kwalitee.
[Test::Kwalitee]



;  3.5. GATHER-CREATE: TEST-DISTRO: Add tests for distro files
;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

;      TEST-DISTRO: Check for a Copyright line in modules and scripts,
; and in the meta files. Also ensures that there is a LICENSE file.
[Test::Legal]

;      TEST-DISTRO: Validate the Changes file format.
[Test::CPAN::Changes]
; changelog = Changes ; Default

;      TEST-DISTRO: Changes file should have new content, else why release?
[Test::ChangesHasContent]

;      TEST-DISTRO: Validates MANIFEST file and MANIFEST.SKIP file by
; checking that [files in distro] minus [files in MANIFEST.SKIP]
; = [files in MANIFEST].
[Test::DistManifest]

;     TEST-DISTRO: Validates the META.yml file
[MetaTests]

;     TEST-DISTRO: Validates the META.json file
[Test::CPAN::Meta::JSON]


;  3.6. GATHER-CREATE: TEST-FILE: Add tests that examine all files.
;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

;      TEST: Don't allow any files with uc(fixme) in them (including
; this file.
[Test::Fixme]

;      TEST: No windows line endings, and no trailing white space.
[Test::EOL]
; trailing_whitespace = 1 ; Default

;      TEST: Avoid problematic unicode issues.
[MojibakeTests]



;  4. GATHER-GENERATE: Create distro files dependent on others
;=======================================================================
;       NOTE: Order matters when generated files depend on each other.


;  5. PRUNE: Remove any files that should not be in distro.
;=======================================================================

;     PRUNE: Out of what was selected, drop a bunch of stuff
; that is commonly found in the project directory, but doesn't
; need to wind up in the distribution. Files to keep can be
; specified here as an "except" entry (multiple are allowed).
;     By default, this plugin drops the following files:
;  <dist_name>-*,  .*,  *.o,  *.bs,  MYMETA.yml,  MYMETA.json
;  pm_to_blib,  blib,  _Inline,  Build,  Makefile, *[c].xs
[PruneCruft]
; except = REG-EXP ; No default

;     PRUNE: Reads a file of regular expressions and removes what is
; listed there. The "skipfile" is almost always called "MANIFEST.SKIP".
[ManifestSkip]
; skipfile = MANIFEST.SKIP ; Default


;  6. MUNGE: Update any files in distro that need changing.
;=======================================================================

;      MUNGE: Copy the "version = ###" line from the dist.ini
; file into all modules, just before every # VERSION tag
; ( keeping any white space before the #, + one blank.
[OurPkgVersion]

;      MUNGE: Replace # COPYRIGHT tagged line with multi-line in file
; copywrite statement. As this changes line numbering, the # COPYRIGHT
; should be at end of the file.
[InsertCopyright]

;      MUNGE: Allow embeded pod to be extracted and appended
[PodWeaver]

;      MUNGE: This plugin rewrites xt/ tests into the t/ test directory.
; It adds code allow for the oprigin directory of the test to be used
; as a selector (as an environmental variable or a command option).
; The tests from ./xt/smoke, ./xt/author/, and ./xt/release/ can be run
; in various combinations using "dzil smoke", "dzil test", and "dzil
; release". Which command runs what tests depends on command options
; and on other plugins. However, none of that is possible without this
; plugin to rewrite tests into t/.
[ExtraTests]


;  7. PACKAGE: Create the distro
;=======================================================================

;     PACKAGE: Creates a MANIFEST file for the distribution. This
; should be run late in the dzil process to ensure no additional
; changes occur in directory contents or files present.
[Manifest]

;     PACKAGE: Add the core build method, support a make driven
; build process and main build file "Makefile.PL".
; Alternately, can use [ModuleBuild]
; [MakeMaker]

;     PACKAGE: Add the core build method, support a make driven
; build process and main build file "Build.PL".
; Alternately, can use [MakeMaker]
[ModuleBuild]


;  8. POST-PACKAGE: Plugins requiring a completed distro.
;=======================================================================

;      POST-PACKAGE: Generates a report of dependencies. Can add or
; subtract modules from this list manually using "include =" and
; "exclude = " (multiple times ok).
[Test::ReportPrereqs]
; include = Some::Module    ; No defaults
; exclude = Another::Module ; No defaults


;  9. PRE-RELEASE: Preparing for a release.
;=======================================================================

;     PRE-RELEASE: Verify everything is checked in before allowing release.
; The default is to allow the changelog file and the dist.ini to NOT
; be checked in when releasing; they will be auto-commited (if using
; [Git:commit] as expected. The general use-case is everything passes
; tests, the change log (and possibly release settings in the dist.ini)
; file receive final edits, and then a "one-step-release" is done.
;      It is also possible to use "allow_dirty" and/or
; "allow_dirty_match" (possibly many) to specify other uncommitted code.
; Setting "allow_dirty=" forces manual commit of any changes to any
; file, including the dist.ini and changes. [TODO, what happens
; if also specify other "allow_dirty" paths.]
;      Untracked files are more of a problem, and the default for
; them is to "die" (kill the release). Can specify "ignore" or
; "warn" also, but not on a file-per-file basis.
[Git::Check]
; allow_dirty     = Changes  ; Default
; allow_dirty     = dist.ini ; Default
; changelog       = Changes  ; Default
; untracked_files = die      ; Default
; allow_dirty_match

;     PRE-RELEASE: Run release (and author) tests before doing a
; release. Abort release if any tests fail.
[TestRelease]

;     PRE-RELEASE: Confirm release, default is NO. If you don't want
; to require a manual confirmation, comment out this plugin.
[ConfirmRelease]

; 10. RELEASE: Releasing the software.
;=======================================================================

;     RELEASE: We are not really releasing yet, are we?
[FakeRelease]

;     RELEASE: Upload the distro to cpan on release. Requires
; a user name and password for your PAUSE account, which can be
; provided in various ways, most conveniently in a ~/.pause
; config file.
; [SRJ _ COMMENTED OUT as not releasing to CPAN]
;[UploadToCPAN]

;      RELEASE: Moves the tarball created to an archive directory. The
; "directory" paraemter can be used to specify this. Note that the file
; archive will be made read-only and is moved, so this has to be the
; last plugin to do a RELEASE.

[ArchiveRelease]
;directory = releases ;Default

; 11. POST-RELEASE: Updating project after a succeful release.
;=======================================================================
;      NOTE: Need to bump release, reset changes files, etc.

;      POST-RELEASE: Automatic version incrementation
[NextRelease]

;      POST-RELEASE: Create a new commit when releasing. By default
; commits the changelog file and the dist.ini file. The commit
; message can be specified with various codes representing
; info about the commit, the default message is read from the
; changelog file using the current version. Translated elements
; are:
;     %c - changes from the just-released version. Includes lines
;          from current version to 
;     %d, %{dd-MMM-yyyy}d - now, with DateTime aware formatting.
;     %N, %v - distro name, just-released distro version
;     %t, %{-TRIAL}t - expands to either {} content | ""
;                      if this is/isn't a trial release
;     %n - newline
; Note that the %d code will use "time_zone", if specified
;      It is possible to have other files added or committed.
[Git::Commit]
; commit_msg = v%v%n%n%c ; Default
; time_zone  = local     ; Default
; change log = Changes   ; Default
; allow_dirty
; allow_dirty_match
; add_files_in

;     POST-RELEASE: Add a tag + message to the release commit. 
; Uses the same codes as in Git::Check, above (including
; the "time_zone", but not allowing %c.) If  "tag_message ="
; is specified, this is a tag with no message.
;     Tags are signed with the users gpg signature if
; signed is set to 1, but this is not done by default.
; (Fall-back is to use "user.signingkey" from git config.)
;     Which branch to tag can be specified, if not the
; current branch.
[Git::Tag]
; tag_format  = v%v   ; Default
; tag_message = v%v   ; Default
; time_zone   = local ; Default
; signed      = 0     ; Default
; branch

;      POST-RELEASE: Pushes the release commit to remotes, by
; default only "push_to" is origin, but more can be specified.
; A nonexistent remote is a failure, unless "remotes_must_exist"
; is set to 0. URL and path remotes are not checked either way.
; SRJ: COMMENTED OUT - not pushing anywhere yet
; [Git::Push]
; push_to = origin       ; Default
; remotes_must_exist = 1 ; Default

;      POST-RELEASE: Final thing to do, install the plugin. You should
; eat your own cooking :) By default using -MCPAN and is os aware, but
; you can specify your own install command using install_command.
;      NOTE: This should be last as if it fails don't want to exit out
; of dzil before doing everything else...
[InstallRelease]
install_command = sudo cpanm .


; 12. MIXED: Plugins doing more than one thing.
;=======================================================================
;       NOTE: Order may matter.

;      MIXED: Read the previous version from the change log, for
; use by [NextVersion::Semantic]. If no prior version, defaults to
; 0.0.0.
;      NOTE: This only exists to support [NextVersion::Semantic].
[PreviousVersion::Changelog]
; filename = Changes ; Default

;      MIXED: Uses the Changes file to control versioning. How this is
; implemented using the DZIL phase and versioning system is complicated,
; but seems to work. It is possible other versioning tools may break
; if using this.
;      Defaults to 0.0.0 if no changes file, fails if there is no change
; in the changes file since last release.
; Looks for [group] headings in the current {{$NEXT}} section of the
; changes file with content. What class the group heading is in
; determines what kind of version jump is applied. Versions are given
; as X.00Y.00Z, or X.00Y00Z (The latter if set "numify_version = 1".)
; A change in a major group bumps X, A change in a minor group bumps Y,
; and a change in a revision group or outside any group bumps Z. Groups
; are assigned to "major", "minor", or "revision" by parameters.
[NextVersion::Semantic]
major = Major, Major (API)
minor = Minor, Minor (Feature)
revision = Revision, Revision (Documentation), Revision (Bug Fix), Revision (Internal)
; change_file = Changes ; Default
numify_version = 1
